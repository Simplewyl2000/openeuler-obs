# openEuler:Mainline
<source>
    @type tail
    path /srv/obs/build/openEuler:Mainline/standard_x86_64/x86_64/:jobhistory,/srv/obs/build/openEuler:Mainline/standard_aarch64/aarch64/:jobhistory
    pos_file /srv/obs/build/fluentd/pos_file/openEuler:Mainline
    tag obs_job_history.openEuler:Mainline
    refresh_interval 60s
    #read_from_head true
    <parse>
        @type regexp
        expression /^(?<package>[^|]*)\|(?<rev>[^|]*)\|(?<srccmd5>[^|]*)\|(?<versrel>[^|]*)\|(?<bcnt>[^|]*)\|(?<readytime>[^|]*)\|(?<starttime>[^|]*)\|(?<endtime>[^|]*)\|(?<code>[^|]*)\|(?<uri>[^|]*)\|(?<workerid>[^|]*)\|(?<hostarch>[^|]*)\|(?<reason>[^|]*)\|(?<verifymd5>[^|]*)$/
        types readytime:integer, starttime:integer, endtime:integer
    </parse>
</source>

# openEuler:Factory
<source>
    @type tail
    path /srv/obs/build/openEuler:Factory/standard_x86_64/x86_64/:jobhistory,/srv/obs/build/openEuler:Factory/standard_aarch64/aarch64/:jobhistory
    pos_file /srv/obs/build/fluentd/pos_file/openEuler:Factory
    tag obs_job_history.openEuler:Factory
    refresh_interval 60s
    #read_from_head true
    <parse>
        @type regexp
        expression /^(?<package>[^|]*)\|(?<rev>[^|]*)\|(?<srccmd5>[^|]*)\|(?<versrel>[^|]*)\|(?<bcnt>[^|]*)\|(?<readytime>[^|]*)\|(?<starttime>[^|]*)\|(?<endtime>[^|]*)\|(?<code>[^|]*)\|(?<uri>[^|]*)\|(?<workerid>[^|]*)\|(?<hostarch>[^|]*)\|(?<reason>[^|]*)\|(?<verifymd5>[^|]*)$/
        types readytime:integer, starttime:integer, endtime:integer
    </parse>
</source>

# openEuler:20.03:LTS
<source>
    @type tail
    path /srv/obs/build/openEuler:20.03:LTS/standard_x86_64/x86_64/:jobhistory,/srv/obs/build/openEuler:20.03:LTS/standard_aarch64/aarch64/:jobhistory
    pos_file /srv/obs/build/fluentd/pos_file/openEuler:20.03:LTS
    tag obs_job_history.openEuler:20.03:LTS
    refresh_interval 60s
    #read_from_head true
    <parse>
        @type regexp
        expression /^(?<package>[^|]*)\|(?<rev>[^|]*)\|(?<srccmd5>[^|]*)\|(?<versrel>[^|]*)\|(?<bcnt>[^|]*)\|(?<readytime>[^|]*)\|(?<starttime>[^|]*)\|(?<endtime>[^|]*)\|(?<code>[^|]*)\|(?<uri>[^|]*)\|(?<workerid>[^|]*)\|(?<hostarch>[^|]*)\|(?<reason>[^|]*)\|(?<verifymd5>[^|]*)$/
        types readytime:integer, starttime:integer, endtime:integer
    </parse>
</source>

# openEuler:20.03:NEXT
<source>
    @type tail
    path /srv/obs/build/openEuler:20.03:LTS:Next/standard_x86_64/x86_64/:jobhistory,/srv/obs/build/openEuler:20.03:LTS:Next/standard_aarch64/aarch64/:jobhistory
    pos_file /srv/obs/build/fluentd/pos_file/openEuler:20.03:LTS:Next
    tag obs_job_history.openEuler:20.03:LTS:Next
    refresh_interval 60s
    #read_from_head true
    <parse>
        @type regexp
        expression /^(?<package>[^|]*)\|(?<rev>[^|]*)\|(?<srccmd5>[^|]*)\|(?<versrel>[^|]*)\|(?<bcnt>[^|]*)\|(?<readytime>[^|]*)\|(?<starttime>[^|]*)\|(?<endtime>[^|]*)\|(?<code>[^|]*)\|(?<uri>[^|]*)\|(?<workerid>[^|]*)\|(?<hostarch>[^|]*)\|(?<reason>[^|]*)\|(?<verifymd5>[^|]*)$/
       types readytime:integer, starttime:integer, endtime:integer
    </parse>
</source>

# openEuler:20.03:LTS:SP1
<source>
    @type tail
    path /srv/obs/build/openEuler:20.03:LTS:SP1/standard_x86_64/x86_64/:jobhistory,/srv/obs/build/openEuler:20.03:LTS:SP1/standard_aarch64/aarch64/:jobhistory
    pos_file /srv/obs/build/fluentd/pos_file/openEuler:20.03:LTS:SP1
    tag obs_job_history.openEuler:20.03:LTS:SP1
    refresh_interval 60s
    #read_from_head true
    <parse>
        @type regexp
        expression /^(?<package>[^|]*)\|(?<rev>[^|]*)\|(?<srccmd5>[^|]*)\|(?<versrel>[^|]*)\|(?<bcnt>[^|]*)\|(?<readytime>[^|]*)\|(?<starttime>[^|]*)\|(?<endtime>[^|]*)\|(?<code>[^|]*)\|(?<uri>[^|]*)\|(?<workerid>[^|]*)\|(?<hostarch>[^|]*)\|(?<reason>[^|]*)\|(?<verifymd5>[^|]*)$/
        types readytime:integer, starttime:integer, endtime:integer
    </parse>
</source>

# openEuler:20.03:LTS:SP2
<source>
    @type tail
    path /srv/obs/build/openEuler:20.03:LTS:SP2/standard_x86_64/x86_64/:jobhistory,/srv/obs/build/openEuler:20.03:LTS:SP2/standard_aarch64/aarch64/:jobhistory
    pos_file /srv/obs/build/fluentd/pos_file/openEuler:20.03:LTS:SP2
    tag obs_job_history.openEuler:20.03:LTS:SP2
    refresh_interval 60s
    read_from_head true
    <parse>
        @type regexp
        expression /^(?<package>[^|]*)\|(?<rev>[^|]*)\|(?<srccmd5>[^|]*)\|(?<versrel>[^|]*)\|(?<bcnt>[^|]*)\|(?<readytime>[^|]*)\|(?<starttime>[^|]*)\|(?<endtime>[^|]*)\|(?<code>[^|]*)\|(?<uri>[^|]*)\|(?<workerid>[^|]*)\|(?<hostarch>[^|]*)\|(?<reason>[^|]*)\|(?<verifymd5>[^|]*)$/
        types readytime:integer, starttime:integer, endtime:integer
    </parse>
</source>

# openEuler:20.09
<source>
    @type tail
    path /srv/obs/build/openEuler:20.09/standard_x86_64/x86_64/:jobhistory,/srv/obs/build/openEuler:20.09/standard_aarch64/aarch64/:jobhistory
    pos_file /srv/obs/build/fluentd/pos_file/openEuler:20.09
    tag obs_job_history.openEuler:20.09
    refresh_interval 60s
    #read_from_head true
    <parse>
        @type regexp
        expression /^(?<package>[^|]*)\|(?<rev>[^|]*)\|(?<srccmd5>[^|]*)\|(?<versrel>[^|]*)\|(?<bcnt>[^|]*)\|(?<readytime>[^|]*)\|(?<starttime>[^|]*)\|(?<endtime>[^|]*)\|(?<code>[^|]*)\|(?<uri>[^|]*)\|(?<workerid>[^|]*)\|(?<hostarch>[^|]*)\|(?<reason>[^|]*)\|(?<verifymd5>[^|]*)$/
        types readytime:integer, starttime:integer, endtime:integer
    </parse>
</source>

# openEuler:21.03
<source>
    @type tail
    path /srv/obs/build/openEuler:21.03/standard_x86_64/x86_64/:jobhistory,/srv/obs/build/openEuler:21.03/standard_aarch64/aarch64/:jobhistory
    pos_file /srv/obs/build/fluentd/pos_file/openEuler:21.03
    tag obs_job_history.openEuler:21.03
    refresh_interval 60s
    read_from_head true
    <parse>
        @type regexp
        expression /^(?<package>[^|]*)\|(?<rev>[^|]*)\|(?<srccmd5>[^|]*)\|(?<versrel>[^|]*)\|(?<bcnt>[^|]*)\|(?<readytime>[^|]*)\|(?<starttime>[^|]*)\|(?<endtime>[^|]*)\|(?<code>[^|]*)\|(?<uri>[^|]*)\|(?<workerid>[^|]*)\|(?<hostarch>[^|]*)\|(?<reason>[^|]*)\|(?<verifymd5>[^|]*)$/
        types readytime:integer, starttime:integer, endtime:integer
    </parse>
</source>

# openEuler:21.09
<source>
    @type tail
    path /srv/obs/build/openEuler:21.09/standard_x86_64/x86_64/:jobhistory,/srv/obs/build/openEuler:21.09/standard_aarch64/aarch64/:jobhistory
    pos_file /srv/obs/build/fluentd/pos_file/openEuler:21.09
    tag obs_job_history.openEuler:21.09
    refresh_interval 60s
    read_from_head true
    <parse>
        @type regexp
        expression /^(?<package>[^|]*)\|(?<rev>[^|]*)\|(?<srccmd5>[^|]*)\|(?<versrel>[^|]*)\|(?<bcnt>[^|]*)\|(?<readytime>[^|]*)\|(?<starttime>[^|]*)\|(?<endtime>[^|]*)\|(?<code>[^|]*)\|(?<uri>[^|]*)\|(?<workerid>[^|]*)\|(?<hostarch>[^|]*)\|(?<reason>[^|]*)\|(?<verifymd5>[^|]*)$/
        types readytime:integer, starttime:integer, endtime:integer
    </parse>
</source>

<system>
    enable_msgpack_time_support true
</system>

# filter
<filter obs_job_history.**>
    @type record_transformer
    enable_ruby
    <record>
        project ${tag_suffix[1]}
        duration ${record["endtime"] - record["starttime"]}
        pending ${record["starttime"] - record["readytime"]}
        success ${if record["code"] == "succeeded"; 1; else; 0; end;}
        failed ${if record["code"] == "succeeded"; 0; else; 1; end;}
        readytime_date ${ require 'date'; DateTime.strptime(record["readytime"].to_s, "%s").new_offset(8.0/24).strftime("%Y-%m-%dT%H:%M:%S%z") }
        starttime_date ${ require 'date'; DateTime.strptime(record["starttime"].to_s, "%s").new_offset(8.0/24).strftime("%Y-%m-%dT%H:%M:%S%z") }
        endtime_date ${ require 'date'; DateTime.strptime(record["endtime"].to_s, "%s").new_offset(8.0/24).strftime("%Y-%m-%dT%H:%M:%S%z") }
        created_at ${ require 'date'; DateTime.strptime(record["starttime"].to_s, "%s").new_offset(8.0/24).strftime("%Y-%m-%dT%H:%M:%S%z") }
    </record>
</filter>

# route
<match obs_job_history.**>
    @type kafka2
    brokers 159.138.58.212:9092,159.138.58.212:9093,159.138.58.212:9094
   
    <format>
        @type json
    </format>

    <buffer topic>
        @type file
        path /srv/obs/build/fluentd/buff_file/buffer
        flush_interval 3s
        chunk_limit_size 5m
    </buffer>

    topic_key topic
    default_topic openeuler_statewall_ci_obs_job_history

    require_ack 1
</match>

# obs build status summary
<source>
  @type tail
  path /srv/obs/build/fluentd/build_status_summary
  pos_file /srv/obs/build/fluentd/pos_file/build_status_summary
  tag obs_build_status.summary
  refresh_interval 60s
  read_from_head true
  <parse>
    @type regexp
    expression /^(?<building>[^|]*)\|(?<blocked>[^|]*)\|(?<signing>[^|]*)\|(?<finished>[^|]*)\|(?<scheduled>[^|]*)\|(?<dispatching>[^|]*)\|(?<succeeded>[^|]*)\|(?<failed>[^|]*)\|(?<unresolvable>[^|]*)\|(?<disabled>[^|]*)\|(?<excluded>[^|]*)\|(?<broken>[^|]*)\|(?<locked>[^|]*)\|(?<unknown>[^|]*)\|(?<ctime>[^|]*)\|(?<project>[^|]*)\|(?<hostarch>[^|]*)\|(?<code>[^|]*)\|(?<stable>[^|]*)$/
    types ctime:integer, building:integer, blocked:integer, signing:integer, finished:integer, scheduled:integer, dispatching:integer, succeeded:integer, failed:integer, unresolvable:integer, disabled:integer, excluded:integer, broken:integer, locked:integer, unknown:integer, ctime:integer, stable:integer
  </parse>
</source>

<filter obs_build_status.summary>
  @type record_transformer
  enable_ruby
  <record>
    runing ${record["building"] + record["blocked"] + record["signing"] + record["finished"] + record["scheduled"] + record["dispatching"]}
    foldup ${record["succeeded"] + record["failed"] + record["unresolvable"] + record["disabled"] + record["excluded"] + record["broken"] + record["locked"] + record["unknown"]}
    ctime_date ${ require 'date'; DateTime.strptime(record["ctime"].to_s, "%s").new_offset(8.0/24).strftime("%Y-%m-%dT%H:%M:%S%z") }
  </record>
</filter>

<match obs_build_status.summary>
  @type kafka2
  brokers 159.138.58.212:9092,159.138.58.212:9093,159.138.58.212:9094
  
  <format>
    @type json
  </format>
 
  <buffer topic2>
    @type file
    path /srv/obs/build/fluentd/buff_file/buffer2
    flush_interval 3s
    chunk_limit_size 5m
  </buffer>
  topic_key topic2
  default_topic openeuler_statewall_ci_obs_build_status_summary
  
  required_acks 1
</match>
